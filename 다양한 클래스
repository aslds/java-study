//앞서 제시한 에제에서는 Person의 인스턴스들을 나이순으로 정렬하였는데, 이를 이름의 길이 순으로 정렬이 되도록 수정해보자. 즉 이름의 길이가 짧으면 배열의 앞으로
import java.util.Arrays;

class Person implements Comparable {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }    

    @Override
    public int compareTo(Object o) {
    	Person p=(Person) o;
    	if(this.name.length()>p.name.length())
    		return 1;
    	else if(this.name.length()<p.name.length())
    		return -1;
    	else
    		return 0;
    }
    
    @Override
    public String toString() {
    	return name+": "+age;
    }
}
class scannerex {
    public static void main(String[] args) {
        Person[] ar = new Person[3];

        ar[0] = new Person("Lepppppe", 29);
        ar[1] = new Person("Goop", 15);
        ar[2] = new Person("Sooop", 37);

        Arrays.sort(ar);

        for(Person p:ar)
        	System.out.println(p);
    }
}



//프로그램 사용자로부터 임의의 정수 A와 Z를 입력받는다. 그리고 A와 Z를 포함하여 그 사이에 있는 난수 10개를 생성하여 출력하는 프로그램을 작성해보자.
import java.util.Random;
import java.util.Scanner;

class scannerex{
	public static void main(String args[]) {
		Scanner scanner=new Scanner(System.in);
		
		System.out.print("첫번째 수를 입력하세요->");
		int get1=scanner.nextInt();
		System.out.print("두번째 수를 입력하세요->");
		int get2=scanner.nextInt();
		System.out.println();
		
		Random rand=new Random(System.currentTimeMillis()); 
		
		for(int i=0;i<10;i++)
			System.out.print(" "+rand.nextInt(get1,get2));//입력받은 수를 기준으로 숫자배치
				
	}
}
